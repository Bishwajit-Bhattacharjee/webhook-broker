// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LogConfig is an autogenerated mock type for the LogConfig type
type LogConfig struct {
	mock.Mock
}

// GetLogFilename provides a mock function with given fields:
func (_m *LogConfig) GetLogFilename() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMaxAgeForALogFile provides a mock function with given fields:
func (_m *LogConfig) GetMaxAgeForALogFile() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetMaxLogBackups provides a mock function with given fields:
func (_m *LogConfig) GetMaxLogBackups() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetMaxLogFileSize provides a mock function with given fields:
func (_m *LogConfig) GetMaxLogFileSize() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// IsCompressionEnabledOnLogBackups provides a mock function with given fields:
func (_m *LogConfig) IsCompressionEnabledOnLogBackups() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsLoggerConfigAvailable provides a mock function with given fields:
func (_m *LogConfig) IsLoggerConfigAvailable() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
